name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: greed_advisor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done

      - name: Setup environment files for CI
        run: |
          chmod +x scripts/setup-env.sh
          ./scripts/setup-env.sh
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/greed_advisor_test
          JWT_SECRET: test-jwt-secret-for-ci-environment-only
          NEXTAUTH_SECRET: test-nextauth-secret-for-ci-environment
          ENCRYPTION_KEY: test-encryption-key-32-characters

      - name: Verify environment setup
        run: |
          echo "Checking .env files..."
          echo "Root .env exists: $(test -f .env && echo 'YES' || echo 'NO')"
          echo "packages/db/.env exists: $(test -f packages/db/.env && echo 'YES' || echo 'NO')"
          echo "apps/web/.env exists: $(test -f apps/web/.env && echo 'YES' || echo 'NO')"
          echo "DATABASE_URL in packages/db/.env:"
          grep DATABASE_URL packages/db/.env || echo "Not found"

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run database migrations
        run: npm run db:migrate

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./coverage

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-and-deploy:
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: greed_advisor_prod
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done

      - name: Setup environment files for production
        run: |
          chmod +x scripts/setup-env.sh
          ./scripts/setup-env.sh
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/greed_advisor_prod
          NODE_ENV: production

      - name: Run database migrations
        run: npm run db:migrate

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      # Add deployment steps here (Docker, Vercel, etc.)
      # - name: Deploy to production
      #   run: echo "Add your deployment steps here"
